Package compiler;


Helpers

	sp = ' ';												//space
  	lf = 0x000a; 											//line feed
  	cr = 0x000d;											//carriage return
  	ff = 0x000c;											//form feed
  	ht = 0x0009; 											//horizontal tab
	
	all = [0 .. 0xffff];
	letter = [['a'..'z'] + ['A'..'Z']];
	digit = ['0'..'9'];
	hex_digit = (digit | 'a' | 'b' | 'c' | 'd' | 'e' | 'f');
	hex_num = 'x' hex_digit hex_digit;
	
	escape = '\' ('n' | 't' | 'r' | '\' | ''' | '"' | hex_num);



	line_comment = '$' [all - [lf + cr]]* (lf | cr | lf cr);
	lterminator = lf | cr | cr lf;
  	white_space = (sp | ht | ff | lterminator)*;

	a = [all - '$'];
	middle = a* ('$' a a*)* ;									// a* ('$'? a)*
	multiline_comment =  '$' '$' middle '$' '$' ;


Tokens
	
	and = 'and';											//keys
	char = 'char';
	divide = 'div';
	do = 'do';
	else = 'else';
	fun = 'fun';
	if = 'if';
	integer = 'int';
	mod = 'mod';
	not = 'not';
	nothing = 'nothing';
	or = 'or';
	ref = 'ref';
	return = 'return';
	then = 'then';
	var = 'var';
	while = 'while';	
	
	id = letter (letter | digit | '_')*;					//Identifiers
	
	number = digit+;										//Integer Numbers
	
	conchars = ''' (letter | digit | escape) ''';			//Constant Characters
	
	strings = '"' [all - '"']* '"';
	
	plus = '+';												//Symbolic operators
	minus = '-';
	mult = '*';
	div = '/';
	hash = '#';
	equal = '=';
	tags = '<>';
	less = '<';
	greater = '>';
	lesseq = '<=';
	greatereq = '>=';
	
	left_par = '(';											//Separators 
	right_par = ')';
	left_bracket = '[';
	right_bracket = ']';
	left_brace = '{';
	right_brace = '}';
	comma = ',';
	semicolon = ';';
	dots = ':';
	arrow = '<-';

	multiline_comment = multiline_comment;
	line_comment = line_comment;
	white_space = white_space;




Ignored Tokens
	
	white_space,
	line_comment,
	multiline_comment;
	
	
	
	
	
//Productions

//Abstract Syntax Tree
	